# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import service_command_pb2 as service__command__pb2
from . import service_passing_pb2 as service__passing__pb2
from . import service_prewarn_pb2 as service__prewarn__pb2
from . import service_status_pb2 as service__status__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TimingSystemStub(object):
    """
    TimingSystem is the service that is running as a server on Ubidiums. You can create
    a TimingSystem client to communicate with local Ubidiums.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OpenPassingStream = channel.stream_stream(
                '/raceresult.ubidium.TimingSystem/OpenPassingStream',
                request_serializer=service__passing__pb2.PassingRequest.SerializeToString,
                response_deserializer=service__passing__pb2.PassingResponse.FromString,
                _registered_method=True)
        self.OpenPrewarnStream = channel.unary_stream(
                '/raceresult.ubidium.TimingSystem/OpenPrewarnStream',
                request_serializer=service__prewarn__pb2.PrewarnRequest.SerializeToString,
                response_deserializer=service__prewarn__pb2.PrewarnResponse.FromString,
                _registered_method=True)
        self.OpenStatusStream = channel.stream_stream(
                '/raceresult.ubidium.TimingSystem/OpenStatusStream',
                request_serializer=service__status__pb2.StatusRequest.SerializeToString,
                response_deserializer=service__status__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.OpenCommandStream = channel.stream_stream(
                '/raceresult.ubidium.TimingSystem/OpenCommandStream',
                request_serializer=service__command__pb2.CommandRequest.SerializeToString,
                response_deserializer=service__command__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.NewFile = channel.unary_unary(
                '/raceresult.ubidium.TimingSystem/NewFile',
                request_serializer=service__command__pb2.CmdNewFile.SerializeToString,
                response_deserializer=service__command__pb2.CmdNewFileResponse.FromString,
                _registered_method=True)
        self.SetTime = channel.unary_unary(
                '/raceresult.ubidium.TimingSystem/SetTime',
                request_serializer=service__command__pb2.CmdSetTime.SerializeToString,
                response_deserializer=service__command__pb2.CmdSetTimeResponse.FromString,
                _registered_method=True)
        self.GetScreen = channel.unary_unary(
                '/raceresult.ubidium.TimingSystem/GetScreen',
                request_serializer=service__command__pb2.CmdGetScreen.SerializeToString,
                response_deserializer=service__command__pb2.CmdGetScreenResponse.FromString,
                _registered_method=True)
        self.PressKey = channel.unary_unary(
                '/raceresult.ubidium.TimingSystem/PressKey',
                request_serializer=service__command__pb2.CmdPressKey.SerializeToString,
                response_deserializer=service__command__pb2.CmdPressKeyResponse.FromString,
                _registered_method=True)
        self.SetSettings = channel.unary_unary(
                '/raceresult.ubidium.TimingSystem/SetSettings',
                request_serializer=service__command__pb2.CmdSetSettings.SerializeToString,
                response_deserializer=service__command__pb2.CmdSetSettingsResponse.FromString,
                _registered_method=True)
        self.GetSettings = channel.unary_unary(
                '/raceresult.ubidium.TimingSystem/GetSettings',
                request_serializer=service__command__pb2.CmdGetSettings.SerializeToString,
                response_deserializer=service__command__pb2.CmdGetSettingsResponse.FromString,
                _registered_method=True)
        self.Reboot = channel.unary_unary(
                '/raceresult.ubidium.TimingSystem/Reboot',
                request_serializer=service__command__pb2.CmdReboot.SerializeToString,
                response_deserializer=service__command__pb2.CmdRebootResponse.FromString,
                _registered_method=True)


class TimingSystemServicer(object):
    """
    TimingSystem is the service that is running as a server on Ubidiums. You can create
    a TimingSystem client to communicate with local Ubidiums.
    """

    def OpenPassingStream(self, request_iterator, context):
        """OpenPassingStream opens a bi-directional passing stream to receive passings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenPrewarnStream(self, request, context):
        """OpenPrewarnStream opens a bi-directional prewarn stream to receive prewarns.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenStatusStream(self, request_iterator, context):
        """OpenStatusStream opens a bi-directional status stream to receive status updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenCommandStream(self, request_iterator, context):
        """OpenCommandStream opens a bi-directional command stream to send commands.
        Note that a TimingSystem client does not need to work with command streams,
        but can call the commands directly.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewFile(self, request, context):
        """NewFile creates a new file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTime(self, request, context):
        """SetTime sets the time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetScreen(self, request, context):
        """GetScreen gets an image of the current screen contents.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PressKey(self, request, context):
        """PressKey simulates a key press.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSettings(self, request, context):
        """SetSetting sets the values of a set of settings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSettings(self, request, context):
        """GetSetting receives the values of a set of settings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reboot(self, request, context):
        """Reboot sends a reboot command.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TimingSystemServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OpenPassingStream': grpc.stream_stream_rpc_method_handler(
                    servicer.OpenPassingStream,
                    request_deserializer=service__passing__pb2.PassingRequest.FromString,
                    response_serializer=service__passing__pb2.PassingResponse.SerializeToString,
            ),
            'OpenPrewarnStream': grpc.unary_stream_rpc_method_handler(
                    servicer.OpenPrewarnStream,
                    request_deserializer=service__prewarn__pb2.PrewarnRequest.FromString,
                    response_serializer=service__prewarn__pb2.PrewarnResponse.SerializeToString,
            ),
            'OpenStatusStream': grpc.stream_stream_rpc_method_handler(
                    servicer.OpenStatusStream,
                    request_deserializer=service__status__pb2.StatusRequest.FromString,
                    response_serializer=service__status__pb2.StatusResponse.SerializeToString,
            ),
            'OpenCommandStream': grpc.stream_stream_rpc_method_handler(
                    servicer.OpenCommandStream,
                    request_deserializer=service__command__pb2.CommandRequest.FromString,
                    response_serializer=service__command__pb2.CommandResponse.SerializeToString,
            ),
            'NewFile': grpc.unary_unary_rpc_method_handler(
                    servicer.NewFile,
                    request_deserializer=service__command__pb2.CmdNewFile.FromString,
                    response_serializer=service__command__pb2.CmdNewFileResponse.SerializeToString,
            ),
            'SetTime': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTime,
                    request_deserializer=service__command__pb2.CmdSetTime.FromString,
                    response_serializer=service__command__pb2.CmdSetTimeResponse.SerializeToString,
            ),
            'GetScreen': grpc.unary_unary_rpc_method_handler(
                    servicer.GetScreen,
                    request_deserializer=service__command__pb2.CmdGetScreen.FromString,
                    response_serializer=service__command__pb2.CmdGetScreenResponse.SerializeToString,
            ),
            'PressKey': grpc.unary_unary_rpc_method_handler(
                    servicer.PressKey,
                    request_deserializer=service__command__pb2.CmdPressKey.FromString,
                    response_serializer=service__command__pb2.CmdPressKeyResponse.SerializeToString,
            ),
            'SetSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSettings,
                    request_deserializer=service__command__pb2.CmdSetSettings.FromString,
                    response_serializer=service__command__pb2.CmdSetSettingsResponse.SerializeToString,
            ),
            'GetSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSettings,
                    request_deserializer=service__command__pb2.CmdGetSettings.FromString,
                    response_serializer=service__command__pb2.CmdGetSettingsResponse.SerializeToString,
            ),
            'Reboot': grpc.unary_unary_rpc_method_handler(
                    servicer.Reboot,
                    request_deserializer=service__command__pb2.CmdReboot.FromString,
                    response_serializer=service__command__pb2.CmdRebootResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raceresult.ubidium.TimingSystem', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('raceresult.ubidium.TimingSystem', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TimingSystem(object):
    """
    TimingSystem is the service that is running as a server on Ubidiums. You can create
    a TimingSystem client to communicate with local Ubidiums.
    """

    @staticmethod
    def OpenPassingStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/raceresult.ubidium.TimingSystem/OpenPassingStream',
            service__passing__pb2.PassingRequest.SerializeToString,
            service__passing__pb2.PassingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OpenPrewarnStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/raceresult.ubidium.TimingSystem/OpenPrewarnStream',
            service__prewarn__pb2.PrewarnRequest.SerializeToString,
            service__prewarn__pb2.PrewarnResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OpenStatusStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/raceresult.ubidium.TimingSystem/OpenStatusStream',
            service__status__pb2.StatusRequest.SerializeToString,
            service__status__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OpenCommandStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/raceresult.ubidium.TimingSystem/OpenCommandStream',
            service__command__pb2.CommandRequest.SerializeToString,
            service__command__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NewFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raceresult.ubidium.TimingSystem/NewFile',
            service__command__pb2.CmdNewFile.SerializeToString,
            service__command__pb2.CmdNewFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raceresult.ubidium.TimingSystem/SetTime',
            service__command__pb2.CmdSetTime.SerializeToString,
            service__command__pb2.CmdSetTimeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetScreen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raceresult.ubidium.TimingSystem/GetScreen',
            service__command__pb2.CmdGetScreen.SerializeToString,
            service__command__pb2.CmdGetScreenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PressKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raceresult.ubidium.TimingSystem/PressKey',
            service__command__pb2.CmdPressKey.SerializeToString,
            service__command__pb2.CmdPressKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raceresult.ubidium.TimingSystem/SetSettings',
            service__command__pb2.CmdSetSettings.SerializeToString,
            service__command__pb2.CmdSetSettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raceresult.ubidium.TimingSystem/GetSettings',
            service__command__pb2.CmdGetSettings.SerializeToString,
            service__command__pb2.CmdGetSettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Reboot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raceresult.ubidium.TimingSystem/Reboot',
            service__command__pb2.CmdReboot.SerializeToString,
            service__command__pb2.CmdRebootResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TimingServerStub(object):
    """
    TimingServer is the service that you can use to communicate with non-local Ubidiums.
    You can create a TimingServer server and configure Ubidiums to connect to it.
    In this case the Ubidium acts as RPC client so the requests and responses are swapped, when compared to the
    TimingSystem service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OpenPassingStream = channel.stream_stream(
                '/raceresult.ubidium.TimingServer/OpenPassingStream',
                request_serializer=service__passing__pb2.PassingResponse.SerializeToString,
                response_deserializer=service__passing__pb2.PassingRequest.FromString,
                _registered_method=True)
        self.OpenStatusStream = channel.stream_stream(
                '/raceresult.ubidium.TimingServer/OpenStatusStream',
                request_serializer=service__status__pb2.StatusResponse.SerializeToString,
                response_deserializer=service__status__pb2.StatusRequest.FromString,
                _registered_method=True)
        self.OpenCommandStream = channel.stream_stream(
                '/raceresult.ubidium.TimingServer/OpenCommandStream',
                request_serializer=service__command__pb2.CommandResponse.SerializeToString,
                response_deserializer=service__command__pb2.CommandRequest.FromString,
                _registered_method=True)


class TimingServerServicer(object):
    """
    TimingServer is the service that you can use to communicate with non-local Ubidiums.
    You can create a TimingServer server and configure Ubidiums to connect to it.
    In this case the Ubidium acts as RPC client so the requests and responses are swapped, when compared to the
    TimingSystem service.
    """

    def OpenPassingStream(self, request_iterator, context):
        """OpenPassingStream opens a bi-directional passing stream to receive passings. Ubidiums will call this method and
        always try to hold one stream open.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenStatusStream(self, request_iterator, context):
        """OpenStatusStream opens a bi-directional status stream to receive status updates. Ubidiums will call this method and
        always try to hold one stream open.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenCommandStream(self, request_iterator, context):
        """OpenCommandStream opens a bi-directional command stream to receive commands. Ubidiums will call this method and
        always try to hold one stream open.
        Since the timing server acts as RPC server, the stream is required to allow the TimingServer to execute commands on the clients (Ubidiums).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TimingServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OpenPassingStream': grpc.stream_stream_rpc_method_handler(
                    servicer.OpenPassingStream,
                    request_deserializer=service__passing__pb2.PassingResponse.FromString,
                    response_serializer=service__passing__pb2.PassingRequest.SerializeToString,
            ),
            'OpenStatusStream': grpc.stream_stream_rpc_method_handler(
                    servicer.OpenStatusStream,
                    request_deserializer=service__status__pb2.StatusResponse.FromString,
                    response_serializer=service__status__pb2.StatusRequest.SerializeToString,
            ),
            'OpenCommandStream': grpc.stream_stream_rpc_method_handler(
                    servicer.OpenCommandStream,
                    request_deserializer=service__command__pb2.CommandResponse.FromString,
                    response_serializer=service__command__pb2.CommandRequest.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raceresult.ubidium.TimingServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('raceresult.ubidium.TimingServer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TimingServer(object):
    """
    TimingServer is the service that you can use to communicate with non-local Ubidiums.
    You can create a TimingServer server and configure Ubidiums to connect to it.
    In this case the Ubidium acts as RPC client so the requests and responses are swapped, when compared to the
    TimingSystem service.
    """

    @staticmethod
    def OpenPassingStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/raceresult.ubidium.TimingServer/OpenPassingStream',
            service__passing__pb2.PassingResponse.SerializeToString,
            service__passing__pb2.PassingRequest.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OpenStatusStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/raceresult.ubidium.TimingServer/OpenStatusStream',
            service__status__pb2.StatusResponse.SerializeToString,
            service__status__pb2.StatusRequest.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OpenCommandStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/raceresult.ubidium.TimingServer/OpenCommandStream',
            service__command__pb2.CommandResponse.SerializeToString,
            service__command__pb2.CommandRequest.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
